https://www.naukri.com/code360/problems/sudoku-solver_699919

TC = O(9^m) ; m = no. of empty cells
SC = O(1), since max recursive call can be 9x9 = 81 
In cpp
#include <vector>
using namespace std;
bool isPossible(int row, int col, int val, vector<vector<int>>& board) {
    int n = board.size();
    for (int i = 0; i < n; ++i) {
        //check for same row
        if (board[row][i] == val) {
            return false;
        }
        //check for same col
        if (board[i][col] == val) {
            return false;
        }
        //check in 3x3 matrix
        if (board[3 * (row / 3) + i / 3][3 * (col / 3) + i % 3] == val) {
            return false;
        }
    }
    return true;
}

bool solve(vector<vector<int>>& board) {
    int n = board.size();
    for (int row = 0; row < n; row++) {
        for (int col = 0; col < n; col++) {
            //cell empty
            if (board[row][col] == 0) {
                for (int val = 1; val <= 9; ++val) {
                    if (isPossible(row, col, val, board)) {
                        board[row][col] = val;
                        //recursive call
                        bool aageKaSolution = solve(board);
                        if (aageKaSolution) {
                            return true;
                        } else {
                            //do backtrack
                            board[row][col] = 0;
                        }
                    }
                }
                return false;
            }
        }
    }
    return true;
}

void solveSudoku(vector<vector<int>>& sudoku) {
    solve(sudoku);
}

In Py
from os import *
from sys import *
from collections import *
from math import *
def ispossible(row, col, val, sudoku):
    for i in range(len(sudoku)):
        if sudoku[row][i] == val:
            return False
        if sudoku[i][col] == val:
            return False
        if sudoku[3*(row//3)+i//3][3*(col//3)+i%3] == val:
            return False
    return True

def solve(sudoku):
    for i in range(len(sudoku)):
        for j in range(len(sudoku)):
            if sudoku[i][j] == 0:
                for val in range(1, 10):
                    if ispossible(i, j, val, sudoku):
                        sudoku[i][j] = val
                        forward = solve(sudoku)
                        if forward:
                            return True
                        else:
                            sudoku[i][j] = 0
                return False
    return True

def solveSudoku(sudoku):
    solve(sudoku)
