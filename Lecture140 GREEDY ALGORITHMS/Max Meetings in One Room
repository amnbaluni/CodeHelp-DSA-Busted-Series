https://www.geeksforgeeks.org/problems/maximum-meetings-in-one-room/1

TC = O(nlogn)
SC = O(n)

class meet{
    public:
    int start, end, index;
    meet(int a, int b, int c){
        start = a;
        end = b;
        index = c;
    }
};
class Solution{
public:
    vector<int> maxMeetings(int N,vector<int> &S,vector<int> &F){
        //tp store timings of meeet class
        vector<meet> times;
        for(int i=0; i<N; i++){
            times.emplace_back(meet(S[i], F[i], i+1));  //1 based indexing hai
        }
        //now sort this times vector
        sort(times.begin(), times.end(), [](meet &a, meet &b){
            if(a.end == b.end){
                return a.index < b.index;
            }
            return a.end < b.end;
        });
        
        vector<int> ans;
        int lastEnd = -1;
        for(int i=0; i<N; i++){
            if(times[i].start > lastEnd){
                ans.push_back(times[i].index);
                lastEnd = times[i].end;
            }
        }
        sort(ans.begin(), ans.end());
        return ans;
    }
};

Using two pairs
    static bool comp(pair<pair<int,int>,int> &a, pair<pair<int,int>,int> &b){
        if (a.first.second == b.first.second)
            return a.first.first < b.first.first;
        return a.first.second < b.first.second;
    }

    vector<int> maxMeetings(int N, vector<int> &S, vector<int> &F) {
        vector<int> ans;
        vector<pair<pair<int, int>, int>> meetings;  // To store meeting times along with their original indices

        for(int i = 0; i < N; i++){
            meetings.push_back({{S[i], F[i]}, i + 1});
        }

        sort(meetings.begin(), meetings.end(), comp);

        int lastEndTime = meetings[0].first.second;
        ans.push_back(meetings[0].second);

        for(int i = 0; i < N; i++){
            if(meetings[i].first.first > lastEndTime){
                lastEndTime = meetings[i].first.second;
                ans.push_back(meetings[i].second);
            }
        }
        sort(ans.begin(), ans.end());
        return ans;
    }
