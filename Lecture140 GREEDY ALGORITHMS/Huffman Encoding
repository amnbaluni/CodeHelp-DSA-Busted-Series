https://www.geeksforgeeks.org/problems/huffman-encoding3345/1

TC = O(nlog(n))
SC = O(n)

class Node {
    public:
       int data;
       Node* left;
       Node * right;
       
       Node(int d){
           data = d;
           left = NULL;
           right = NULL;
       }
};

class cmp{
    public:
       bool operator()(Node* a, Node* b){
           return a->data > b->data;
       }
};

class Solution
{
	public:
	    void traverse(string temp, vector<string> &ans, Node* root){
	        //base case
	        if(root->left == NULL && root->right == NULL){
	            ans.push_back(temp);
	            return; 
	        }
	        traverse(temp+'0', ans, root->left);
	        traverse(temp+'1', ans, root->right);
	    }
	    
		vector<string> huffmanCodes(string S,vector<int> f,int N)
		{   
		    //step1-push all the nodes in priority queue
		    priority_queue<Node*, vector<Node*>, cmp> pq;
		    for(int i=0; i<N; i++){
		        Node* temp = new Node(f[i]);
		        pq.push(temp);
		    }
		    //step2
		    while(pq.size()>1){
		        Node* left = pq.top();
		        pq.pop();
		        Node* right = pq.top();
		        pq.pop();
		        Node* newNode = new Node(left->data + right->data);
		        newNode->left = left;
		        newNode->right = right;
		        pq.push(newNode);
		    }
		    //now we have 1 node remaining which is root node
		    Node* root = pq.top();
		    vector<string> ans;
		    string temp = "";
		    traverse(temp, ans, root);
		    return ans;
		}
};
