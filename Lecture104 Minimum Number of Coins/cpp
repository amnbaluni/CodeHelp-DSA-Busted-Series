#include <bits/stdc++.h> 
int solveRecursion(vector<int> &num, int x){
    int n = num.size(); //size of array
    //base case
    if(x==0){
        return 0;
    }
    //if amount is negative
    if(x<0){
      return INT_MAX;
    }

    int mini = INT_MAX;

    for(int i=0; i<n; i++){
        int ans = solveRecursion(num, x - num[i]);
        if(ans != INT_MAX){
            mini = min(mini, 1+ans);
        }
    }
    return mini;
}

int solveMemo(vector<int> &num, int x, vector<int> &dp){
    int n = num.size(); //size of array
    //base case
    if(x==0){
        return 0;
    }
    //if amount is negative
    if(x<0){
      return INT_MAX;
    }

    if(dp[x] != -1){
        return dp[x];
    }

    int mini = INT_MAX;

    for(int i=0; i<n; i++){
        int ans = solveRecursion(num, x - num[i]);
        if(ans != INT_MAX){
            mini = min(mini, 1+ans);
        }
    }

    dp[x] = mini;
    return mini;
}

int solveTabu(vector<int> &num, int x){
    vector<int> dp(x+1, INT_MAX);
    dp[0] = 0;
    for(int i=1; i<=x; i++){
        for(int j=0; j<num.size(); i++){
            if (dp[i - num[j]] < INT_MAX && i - num[j] >= 0) {
              dp[i] = min(dp[i], 1+dp[i-num[j]]);
            }
        }  
    }

    if(dp[x] == INT_MAX){
        return -1;
    }
    return dp[x];
}

int minimumElements(vector<int> &num, int x)
{
    // int ans = solveRecursion(num, x);
    // if(ans == INT_MAX){
    //     return -1;
    // }
    // return ans;

    //solve using memoization
    // vector<int> dp(x+1, -1);
    // int ans = solveMemo(num, x, dp);
    // if(ans == INT_MAX){
    //     return -1;
    // }
    // else{
    //     return ans;
    // }

    return solveTabu(num, x);
}

Time Complexity - 
  with Recursion = exponential
  Recursion + Memo = O(x*n)
  x = amount n = no. of coins
  SC = O(x)
 Recursion + Tabu = O(x*n)
  x = amount n = no. of coins
  SC = O(x)
