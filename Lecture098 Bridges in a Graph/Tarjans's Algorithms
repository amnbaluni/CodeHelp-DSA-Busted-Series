void dfs(int node, int parent, vector<int> &visited, vector<int> adj[], int tin[], int low[], vector<vector<int>> &bridges, int &timer) {
    visited[node] = 1;
    tin[node] = low[node] = timer++;
    for (int it : adj[node]) {
        if (it == parent)
            continue;
        if (!visited[it]) {
            dfs(it, node, visited, adj, tin, low, bridges, timer);
            low[node] = min(low[node], low[it]);
            if (low[it] > tin[node]) {
                bridges.push_back({it, node});
            }
        } else {
            low[node] = min(low[node], tin[it]);
        }
    }
}

vector<vector<int>> findBridges(vector<vector<int>> &edges, int v, int e) {
   vector<int> adj[v];
    for (auto it : edges) {
        adj[it[0]].push_back(it[1]);
        adj[it[1]].push_back(it[0]);
    }

    vector<int> visited(v, 0);
    int tin[v], low[v];
    vector<vector<int>> bridges;
    int timer = 1;
    for (int i = 0; i < v; ++i) {
        if (!visited[i]) {
            dfs(i, -1, visited, adj, tin, low, bridges, timer);
        }
    }
    return bridges;
}

TC = O(V+2E)
SC = O(V+2E) + O(3N)
