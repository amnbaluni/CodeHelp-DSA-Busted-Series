bool isSafe(int x, int y, int n, vector<vector<int>>& visited, vector<vector<int>> &m){
        if((x>=0 && x<n) && (y>=0 && y<n) && visited[x][y]==0 && m[x][y]==1){
            return true;
        } 
        else{
          return false;
        }
    }
    void solve(int x, int y, vector<vector<int>> &m, int n, vector<vector<int>> visited, string path, vector<string>& ans){
        //base case
        if(x==n-1 && y==n-1){
            ans.push_back(path);
            return;
        }
        visited[x][y] = 1;
        
        //down wala case
        int newX = x+1;
        int newY = y;
        if(isSafe(newX, newY, n, visited, m)){
            path.push_back('D');
            solve(newX, newY, m, n, visited, path, ans);
            //backtrack
            path.pop_back();
        }
        //left wala case
        newX = x;
        newY = y-1;
        if(isSafe(newX, newY, n, visited, m)){
            path.push_back('L');
            solve(newX, newY, m, n, visited, path, ans);
            //backtrack
            path.pop_back();
        }
        //right wala case
        newX = x;
        newY = y+1;
        if(isSafe(newX, newY, n, visited, m)){
            path.push_back('R');
            solve(newX, newY, m, n, visited, path, ans);
            //backtrack
            path.pop_back();
        }
        //up wala case
        newX = x-1;
        newY = y;
        if(isSafe(newX, newY, n, visited, m)){
            path.push_back('U');
            solve(newX, newY, m, n, visited, path, ans);
            //backtrack
            path.pop_back();
        }
        visited[x][y] = 0;
    } 
    vector<string> findPath(vector<vector<int>> &m, int n) {
        vector<string> ans;
        int sx = 0;
        int sy = 0;
        vector<vector<int>> visited = m;
        //initialize with zero
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                visited[i][j] = 0;
            }
        }
        
        string path = "";
        solve(sx, sy, m, n, visited, path, ans);
        sort(ans.begin(), ans.end());
        return ans;
    }
