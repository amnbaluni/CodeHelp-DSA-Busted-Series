class Solution{
public:
    // int solve(int i, int j, int arr[]){
    //     //base case
    //     if(i==j){
    //         return 0;
    //     }
    //     int mini = INT_MAX;   //this is going to be my ans
    //     for(int k=i; k<=j-1; k++){
    //         //[i, k] -> [k+1, j]
    //         int ans = solve(i, k, arr) + solve(k+1, j, arr) + arr[i-1] * arr[k] * arr[j];
    //         mini = min(mini, ans);
    //     }
    //     return mini;
    // }
    // int solveMemo(int i, int j, int arr[], vector<vector<int>>& dp){
    //     //base case
    //     if(i==j){
    //         return 0;
    //     }
    //     if(dp[i][j] != -1){
    //         return dp[i][j];
    //     }
    //     int mini = INT_MAX;   //this is going to be my ans
    //     for(int k=i; k<=j-1; k++){
    //         //[i, k] -> [k+1, j]
    //         int ans = solveMemo(i, k, arr, dp) + solveMemo(k+1, j, arr, dp) + arr[i-1] * arr[k] * arr[j];
    //         mini = min(mini, ans);
    //     }
    //     return dp[i][j] = mini;
    // }
    
    int solveTabu(int N, int arr[]){
        vector<vector<int>>dp(N+1,vector<int>(N+1,INT_MAX));
        for(int i=N-2 ; i>=0 ; i--){
            for(int j=0 ; j<=N-2 ; j++){
                if(i==j){
                    dp[i][j]=0;
                    continue;
                }
                for(int k=i ; k<=j-1 ; k++){
                    int ans = dp[i][k]+dp[k+1][j] + arr[i]*arr[k+1]*arr[j+1];
                    dp[i][j]=min(dp[i][j], ans);
                }
            }
        }
        return dp[0][N-2];
    }
    
    int matrixMultiplication(int N, int arr[])
    {
        // return solve(1, N-1, arr);
        // vector<vector<int>> dp(N+1,vector<int>(N+1, -1));
        // return solveMemo(1, N-1, arr, dp);
        return solveTabu(N, arr);
    }
};
