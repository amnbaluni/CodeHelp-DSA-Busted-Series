https://leetcode.com/problems/min-cost-climbing-stairs

Solution for Recursion + Memoization (top down approach)
class Solution {
private:

    // int solve1(vector<int>& cost, int n) {
    //     // base case
    //     if (n == 0) {
    //         return cost[0];
    //     }
    //     if (n == 1) {
    //         return cost[1];
    //     }
    //     int ans = cost[n] + min(solve1(cost, n-1), solve1(cost, n-2));
    //     return ans;
    // }
    
    int solve2(vector<int>&cost, int n, vector<int> &dp){
       //Base Case
       if(n==0){
           return cost[0];
       }
       if(n==1){
           return cost[1];
       }

       //Step3
       if(dp[n] != -1){
          return dp[n];
       }

       //Step2
       dp[n] = cost[n] + min(solve2(cost, n-1, dp), solve2(cost, n-2, dp));
       return dp[n];
    }
public:
    int minCostClimbingStairs(vector<int>& cost) {
        // int n = cost.size();
        // // You need to consider the cost of reaching the top from either the last or second-to-last step.
        // int ans = min(solve1(cost, n-1), solve1(cost, n-2));
        // return ans;

        int n = cost.size();
        //Step 1 - initialize dp array
        vector<int> dp(n+1, -1);

        int ans = min(solve2(cost, n-1, dp),solve2(cost, n-2, dp));
        return ans;
    }
};
TC = O(n) - using recursion
TC = O(n)+O(n) - using recursion + memoization



Tabulation Method - (Bottom Up Approach)
class Solution {
private:
    int solve(vector<int>& cost, int n){
        //Step1 - Create dp array
        vector<int> dp(n+1);

        //Step2 - base case bna lo
        dp[0] = cost[0];
        dp[1] = cost[1];

        //Step3 - check for remaining case (from 2 to n-1)
        for(int i=2; i<n; i++){
            dp[i] = cost[i] + min(dp[i-1], dp[i-2]);
        }
        return min(dp[n-1], dp[n-2]);
    }
     
public:
    int minCostClimbingStairs(vector<int>& cost) {
        
        int n = cost.size();
        return solve(cost, n);
    }
};
TC = O(n)  SC = O(n)


Space Optimization
class Solution {
private:
    int solve(vector<int>& cost, int n){
       int prev2 = cost[0];
       int prev1 = cost[1];
       for(int i=2; i<n; i++){
           int curr = cost[i] + min(prev1, prev2);
           prev2 = prev1;
           prev1 = curr;
       }
       return min(prev1, prev2);
    }
     
public:
    int minCostClimbingStairs(vector<int>& cost) {
        int n = cost.size();
        return solve(cost, n);
    }
};
TC = O(n)  SC = O(1)
