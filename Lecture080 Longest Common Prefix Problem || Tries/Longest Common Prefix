https://www.naukri.com/code360/problems/longest-common-prefix_2090383
Brute Force
string longestCommonPrefix(vector<string> &arr, int n)
{    
    string ans = "";
    //traverse all characters of first string
    for(int i=0; i<arr[0].length(); i++){
        char ch = arr[0][i];
        bool match = true;

        //for comparing ch with rest of the strings
        for(int j=1; j<n; j++){
            //not match
            if(arr[j].size() < i || ch!=arr[j][i]){
                match = false;
                break;
            }
        }
        
        if(match==false){
            break;
        }
        else{
            ans.push_back(ch);
        }
    }
    return ans;
}

*********************************************************************************************
Using Trie
class TrieNode {
public:
  char data;
  TrieNode *children[26];
  int childCount;
  bool isTerminal;

  TrieNode(char ch) {
    data = ch;
    for (int i = 0; i < 26; i++) {
      children[i] = NULL;
    }
    isTerminal = false;
    childCount = 0;
  }
};

class Trie {
public:
  TrieNode *root;
  Trie(char ch) { root = new TrieNode(ch); }

  void insertUtils(TrieNode *root, string word) {
    // base case
    if (word.length() == 0) {
      root->isTerminal = true;
      return;
    }

    // Assuming words will be in caps
    int index = word[0] - 'a';
    TrieNode *child;

    // if character is present
    if (root->children[index] != NULL) {
      child = root->children[index];
    } else {
      // absent
      child = new TrieNode(word[0]);
      root->childCount++;
      root->children[index] = child;
    }

    // recursion
    insertUtils(
        child,
        word.substr(1)); // first char ko chor kr aage wala word pass krdo
  }

  /** Inserts a word into the trie. */
  void insertWord(string word) { insertUtils(root, word); }

  void lcp(string str, string &ans) {
    for (int i = 0; i < str.length(); i++) {
      char ch = str[i] - 'a';
      if (root->childCount == 1) {
        ans.push_back(ch);
        // aage bhad jao
        int new_index = ch - 'a';
        root = root->childCount[new_index];
      } else {
        break;
      }
      if (root->isTerminal) {
        break;
      }
    }
  }

}

string longestCommonPrefix(vector<string> &arr, int n) {
  Trie *t = new Trie('/0');
  for (int i = 0; i < n; i++) {
    string str = arr[i];
    t->insertWord(str);
  }
  string ans = "";
  t->lcp(arr[0], ans); // initially passing first string;
  return ans;
}
