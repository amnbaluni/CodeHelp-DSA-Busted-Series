Problem Statement
String permutations have applications ranging from security and encryption to optimization and analysis. It allows us to solve complex problems and study varied data configurations. An example of a string permutation is given below. In this example, you have to print all the permutations of the string “abc”. So in the output, you will see all 6 permutations of “abc”.

You are given a string ‘str’ consisting of lowercase letters. Your task is to return all permutations in string in any order.

Sample Input
abc

Sample Output 
abc acb bac bca cab cba

#include <vector>
#include <string>
#include <algorithm>
void solve(string &str, vector<string> &ans, int index) {
  if (index >= str.length()) {
    ans.push_back(str);
    return;
  }
  for (int j = index; j < str.length(); j++) {
    swap(str[index], str[j]);
    solve(str, ans, index + 1);
    // backtrack
    swap(str[index], str[j]);
  }
}
vector<string> generatePermutations(string &str) {
  vector<string> ans;
  int index = 0;
  solve(str, ans, index);
  sort(ans.begin(), ans.end());
  return ans;
}
